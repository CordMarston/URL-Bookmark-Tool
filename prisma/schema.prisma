// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Link {
  id        Int       @id @default(autoincrement())
  link      String    @db.LongText
  alias     String    @unique
  userId    String?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id])
  visits    LinkVisit[]
  @@map("links")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, provider])
  @@map("accounts")
   
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  link          Link[]
 
  @@map("users")
}

model LinkVisit {
  id             String    @id @default(cuid())
  linkId         Int    @map("link_id")
  ipAddress      String?
  osName         String?
  osVersion      String?
  browserName    String?
  browserVersion String?
  bot            Boolean   @default(false)
  createdAt      DateTime  @default(now())
  link           Link      @relation(fields: [linkId], references: [id])
  @@map("visits")
}